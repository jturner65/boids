Our submission for this assignment includes a program that allows the user to manipulate a graph.  The user can add and remove edges and nodes to create any connected graph.  As the user manipulates the graph, corner positions are drawn at a fixed distance from the nodes, and ‘sidewalks’ are drawn to connect the corners within a face. Lastly, the user can see the area of a face by clicking that face.  The user can choose a node by clicking, which will highlight the node and one of its corners in red.  It will also highlight the next corner to the selected corner in blue and the swing corner from the selected corner in green.  By pressing N, P, S, U or Z the user can navigate to the appropriate corner from the selected corner.
The structure of the graph is determined by the data saved in the corner table.  Each row in the table represents a corner on the graph.  Each corner stores the id of its vertex, the id of the next corner and the id of the swing corner.  With this representation of the corners, the only other data structure we need is an array to store the x and y positions of the vertices.  The edges of the graph can be determined by connecting the vertices of adjacent corners. However, for convenience, our implementation also stores an array of edges so we can avoid reconstructing them every pass.
The user is allowed to add and remove edges anywhere on the graph, as long as the result is a legal connected graph.  When adding an edge, we assure that the new edge does not cross any of the existing edges.  This is accomplished by checking whether both nodes of the new edges are on the same side of each existing edge (ie, the edge is either completely to the right or completely to the left of each edge in the graph).  Once a new component is added, the corner table is updated accordingly. When deleting an edge or node, we need to make sure result is a legal connected graph.  We can only delete nodes that are either degree one or two.  For a degree one node, we delete the node and its edge.  For a degree two node, we remove the node and its edges, but add a new edge connecting the next node and the previous node.  Finally, when removing an edge we need to assure the graph remains connected.  This is accomplished by performing a depth first search on the graph with the edge removed.  If the search reaches every vertex, than the graph remains connected.  Otherwise, the edge cannot be removed.
We compute the position of the corners using the corner’s adjacent edges. For edges BA and BC and distance d, corner point D = B + (d/BA|BC)(BA + BC).  However, there are a few edge cases we need to check for.  First, if points A and C are the same, we have reached an edge connected to a node with degree one.  In this case, we want to draw the corner at a position collinear to the edge at a distance d away from the vertex.  We also check if BA = - BC.  In this case, the angle between the edges is 180 degrees, and we want to draw the corner a distance d away from the vertex in the direction perpendicular to the edges.
